// Code generated by go-bindata.
// sources:
// schemas/v1/errors.json
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasV1ErrorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4f\x6f\xe2\x3e\x10\xbd\xf3\x29\x2c\x97\xd3\x4f\xb4\xf9\xf5\xb2\x07\x6e\x48\x5c\xf6\xb4\x3d\xf5\x52\xb1\x2b\x93\x4c\xc0\xdd\xc4\x4e\xc7\x13\x24\x54\xf1\xdd\x57\x76\x9c\x38\x09\x24\xb0\x40\xf7\x16\x79\xde\xfc\x79\xef\x4d\x2c\x7f\x4e\x18\xe3\x53\x13\x6f\x21\x17\x7c\xce\xf8\x96\xa8\x98\x47\xd1\xbb\xd1\xea\xb1\x3a\x7d\xd2\xb8\x89\x12\x14\x29\x3d\xfe\xff\x2d\xaa\xce\x1e\xf8\xcc\xe6\x25\x60\x62\x94\x05\x49\xad\x6c\xee\x82\x65\xd2\x10\xd3\x29\x03\x44\x8d\xa6\x02\xd1\xbe\x00\x1b\xd5\xeb\x77\x88\xa9\x3a\x43\xf8\x28\x25\x42\xc2\xe7\xec\x8d\xef\x00\x8d\xad\x30\x63\x3c\xd1\xb9\x90\xee\xcb\x40\x6c\xcb\x1a\xbe\x72\x09\x05\xea\x02\x90\x24\x18\x3e\x67\x76\x66\xc6\x9a\xbc\xfa\xa0\xd5\x4b\x95\xf9\x1a\xd0\xf5\x72\xe7\xa0\xca\xdc\xf6\x7a\x5e\xb9\x93\x43\x15\xa8\xdb\xcd\xd9\x27\x9f\x22\xa4\x36\xf3\x21\x4a\x20\x95\x4a\xba\xe6\x91\x07\xd4\xf8\x66\xa8\xe1\x8c\x06\x72\x98\xf8\x3e\x5c\x24\x89\x0b\x8a\xec\xa5\xcd\x22\x15\x99\x01\x2f\x63\x93\x1f\xd8\x85\xd9\xfa\xe4\x5a\x42\xba\xf3\x8e\x98\x24\x29\x03\x2b\xe0\x6f\xd8\x57\xda\x39\xcc\x09\xfd\xaa\x9a\x0e\x6e\xe9\xd4\xd5\x0d\xa1\x54\x9b\x9a\xb2\x03\xd9\x52\xa7\x20\x1e\xd1\x40\x47\x99\x76\x84\x6f\x0b\x79\x8e\x5e\x21\x88\x00\xd5\xcb\x00\x83\x9f\x4f\xff\x4d\xcf\xfb\x71\x87\x61\xaf\xb7\xc2\xff\x0d\x77\x72\xc3\x57\x1b\xa6\xec\x01\x37\x30\x0e\x2d\xbe\xd6\x1c\xd7\xe7\xe6\x41\xaf\x37\xa6\x7d\x7f\xdd\xc9\x9d\xee\x95\x38\x4a\x7c\xd9\x82\xb6\x4b\x08\xdc\x94\x39\x28\x3a\xeb\xf1\xa2\x01\xde\x2a\xe1\xb2\x3b\x75\x53\x44\xed\x7f\xd8\xe6\x6f\xcd\x70\x63\xdc\x83\x54\xc3\x46\xb8\x58\x2e\xbb\x0b\xf3\xdc\x89\x0e\xc8\xef\x62\x29\x4a\x50\x49\x76\xfa\x3a\x9a\x75\xb1\x04\xf1\x56\xc9\x58\x64\x63\x77\x57\x47\xb4\xcb\x84\x73\x29\xfe\x6b\x75\x2c\xe5\xa2\xed\xde\x3f\xf8\x7d\xea\x7e\x37\xef\x40\x53\xe8\xc2\x05\x50\x65\x96\x5d\x65\xff\x98\xc1\xfd\xdf\xe7\x8c\xc7\x3b\x91\xc9\x44\xd0\x05\xf7\x61\xcd\xee\x35\x64\xf4\x8b\x25\x90\x8a\x32\xa3\x4b\x2b\x2d\x3d\xfc\xeb\x57\xe9\xb5\xc3\xb2\xbf\x53\x02\x51\xec\xc3\x4a\x49\x82\xfc\xef\xd5\x08\x62\xf0\x52\xc9\x8f\x12\xbe\xfb\x32\x84\xe5\xc8\xae\x84\xfc\x13\x83\x79\xcf\x8e\x1e\x61\x61\xbf\x7b\xcf\x34\xbb\x1b\xda\x48\x92\x3b\xf8\x75\x1c\x52\x5a\x29\xd8\x88\x81\xa8\x54\x04\x1b\x40\x7e\x5e\xcd\x65\xb0\xf9\xaa\x35\x1f\xbb\x01\xfb\x0f\xd0\x93\xb1\xb5\xd6\x19\x88\xf0\x24\xf1\xb3\xda\xf7\xe2\xe4\x30\xf9\x13\x00\x00\xff\xff\x89\x8d\xa0\x3a\x91\x0b\x00\x00")

func schemasV1ErrorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasV1ErrorsJson,
		"schemas/v1/errors.json",
	)
}

func schemasV1ErrorsJson() (*asset, error) {
	bytes, err := schemasV1ErrorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/v1/errors.json", size: 2961, mode: os.FileMode(420), modTime: time.Unix(1509664514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/v1/errors.json": schemasV1ErrorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"errors.json": &bintree{schemasV1ErrorsJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

