// Code generated by go-bindata.
// sources:
// schemas/v1/errors.json
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasV1ErrorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4f\x4f\xe3\x3e\x10\xbd\xf7\x53\x58\x86\xd3\x4f\x40\x7f\x5c\xf6\x50\xad\x90\x90\x7a\x60\x0f\x68\x91\xa8\xb8\xac\xd8\x95\xdb\x4c\x52\xb3\x89\x13\xec\x09\x52\x85\xf8\xee\x2b\x3b\x76\x62\x27\x4d\x52\xfa\x87\x03\x12\x19\xcf\xbc\xf1\xcc\x1b\x3f\xbb\xef\x13\x42\xe8\xb9\x5a\xad\x21\x63\x74\x46\xe8\x1a\xb1\x98\x4d\xa7\x2f\x2a\x17\x97\x95\xf5\x2a\x97\xc9\x34\x92\x2c\xc6\xcb\xff\xbf\x4d\x2b\xdb\x19\xbd\xd0\x71\x11\xa8\x95\xe4\x05\xf2\x5c\xe8\xd8\x5b\x92\x72\x85\x24\x8f\x09\x48\x99\x4b\x55\x39\xe1\xa6\x00\xbd\x9a\x2f\x5f\x60\x85\x95\x4d\xc2\x6b\xc9\x25\x44\x74\x46\x7e\xd1\x37\x90\x4a\x23\x5c\x10\x1a\xe5\x19\xe3\xe6\x3f\x05\x2b\x0d\xab\xe8\xb3\x09\x28\x64\x5e\x80\x44\x0e\x8a\xce\x88\xde\x33\x21\x75\x9c\x33\x78\xb9\x44\x99\x2d\x41\x9a\x5c\xc6\x0e\xa2\xcc\x74\xae\xeb\x67\x63\xf9\xa8\x16\x5c\xba\x19\x79\xa7\xe7\x12\x62\x1d\x79\x36\x8d\x20\xe6\x82\x9b\xe4\x53\xeb\xe0\xfc\xeb\x4d\xf5\x47\xd4\x2e\x1f\x13\x9b\x87\xb2\x28\x32\x8b\x2c\x7d\xf0\xab\x88\x59\xaa\xc0\xb6\xb1\x8e\x6f\xaa\x6b\xf6\xd6\x2e\xce\x6b\xa4\xb1\x07\xcd\x44\x8e\x29\xe8\x06\xfe\x85\x4d\xd5\x3b\xe3\xb3\xa5\x7f\x15\xa6\x71\xd7\xe5\x38\x74\x85\x92\x8b\xc4\x95\x6c\x9c\x34\xd4\x36\x17\xeb\x51\xbb\x0e\x56\x1a\x34\xde\x6f\xe4\x58\x79\x05\x43\x04\x29\x1e\x7a\x2a\xf8\x7d\xf5\xdf\xf9\x38\x1f\x47\xd8\xec\xfe\x54\xd8\xd3\x70\x24\x36\x2c\x5a\x7f\xc9\xd6\xe1\x80\x8a\x9b\x14\xa7\x25\xc7\xe4\x39\x78\xa3\xfb\x13\xe3\xeb\xd7\x91\xd8\x51\x20\x14\x47\xfe\xc6\x71\x33\x56\xf8\xa3\xe7\xea\x43\x84\xaa\x3a\x08\x31\xf7\x5c\x7d\x08\x26\x93\x32\x03\x81\xa3\x63\x72\x5b\x3b\xfa\xe1\x19\x20\x8b\x18\xb2\xb1\xe8\x7b\xe7\x77\x28\x85\x8f\x61\xd7\xda\x6c\xda\x3e\x77\xe4\xbc\xd9\xb1\xc8\x05\x50\xff\x90\x44\x49\xf0\xbd\x2c\x13\xff\x93\xa5\x29\xb5\x5f\x0d\xef\x11\xc4\xac\x4c\xd1\xdc\x1f\x1a\xae\xbb\xcd\x79\xc8\x4c\x5d\xab\xd8\xfc\x8c\x83\xfd\x0c\x8d\x48\x33\x51\xfd\xf3\x5a\xb1\xc0\xc3\x73\x75\x1d\xac\xf6\x4c\xa9\x59\x8b\x25\x07\x11\xa5\xdb\x55\xfb\x22\xf4\x45\x58\xad\x05\x5f\xb1\x74\x48\xe2\x03\x6e\x77\xe3\xd7\x84\xb8\x1e\x77\x5b\x79\xeb\x4f\xe8\x17\xa8\x8c\xcb\x77\xf0\xa8\xd6\x40\x3b\x0e\x80\x28\xd3\x74\x2f\xfa\x87\x08\xb6\x71\x3b\x55\xbc\xd0\xbe\x6d\xd6\xdb\x1a\x33\x32\x24\x6f\x2c\xe5\x11\xc3\x1d\xee\x1d\x97\xf5\xa9\x89\xe8\xe6\x76\xe7\x6c\x27\xa4\xb9\x75\x3f\xfd\x2c\x2e\x6c\x57\x3f\x2f\x3f\x2d\x0f\xd2\x79\x81\x12\x42\xb9\x40\x48\x42\xd3\x32\xcf\x53\x60\xc2\x37\xe9\x17\xf4\xf7\x0a\xee\xa6\x63\xaf\x40\xbb\x76\x0b\xdd\x5d\xb0\x09\x6e\xe8\x78\xf1\x4f\x01\xc5\xed\x16\x30\x29\xd9\xa6\xe9\x00\x47\xc8\x3e\x3f\x0a\xcd\x24\xd0\x52\xf0\xd7\x12\x7e\x58\x18\x94\xe5\xc0\x49\x6b\xe2\xf7\xbb\x1a\x3a\x4c\x14\xb9\xb9\x6c\xe0\x4f\x77\x49\xe4\x42\x40\xc2\x7a\x56\x1d\x85\xe3\xdd\x9c\x37\x33\xbe\x97\x48\x0c\xdd\x1f\xed\x5f\x39\x5b\xd7\xdc\x68\x0d\x8c\xfd\xbd\x77\xcb\x8f\x2a\x70\x8f\xf4\xea\x9f\x8b\xbb\xbe\x12\xee\x16\x8b\x87\x83\xe5\x37\x00\x3b\xb5\x04\x07\xaf\x46\x85\x0c\x4b\xef\x15\x3f\xd4\x17\x52\x89\x82\x09\xf0\xe5\xd5\x0d\x50\x5b\x12\xd7\xc0\x22\x18\x17\x57\xbf\xf8\x3b\x1b\x72\x3a\x59\xdc\x96\xed\x6b\x2e\xeb\x6e\xe6\xa3\xce\x8d\x85\x3c\xee\x0b\x2e\x54\x48\x12\xa8\xe4\xd6\xcb\xdb\x01\xfb\xfc\xf5\xd1\x32\xd1\x7f\x1f\x93\x7f\x01\x00\x00\xff\xff\xc7\xe3\xe4\x85\xad\x11\x00\x00")

func schemasV1ErrorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasV1ErrorsJson,
		"schemas/v1/errors.json",
	)
}

func schemasV1ErrorsJson() (*asset, error) {
	bytes, err := schemasV1ErrorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/v1/errors.json", size: 4525, mode: os.FileMode(420), modTime: time.Unix(1536796096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/v1/errors.json": schemasV1ErrorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"errors.json": &bintree{schemasV1ErrorsJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

