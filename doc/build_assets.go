// Code generated by go-bindata.
// sources:
// schemas/v1/errors.json
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasV1ErrorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x4f\xdc\x3c\x10\xbe\xef\xaf\xb0\x0c\xa7\x57\x40\x5e\x2e\x3d\xac\x2a\x24\xa4\x3d\xb4\x07\x54\x0e\x2b\x2e\x88\x56\x26\x99\x2c\xa6\x89\x1d\xec\x09\xd2\x0a\xf1\xdf\x2b\x3b\x4e\x62\x27\x9b\x8f\xee\x47\x6f\xab\x99\x67\x66\x3c\xcf\x33\x9e\x78\x3f\x16\x84\xd0\x73\x1d\xbf\x40\xce\xe8\x92\xd0\x17\xc4\x62\x19\x45\xaf\x5a\x8a\xcb\xca\x7a\x25\xd5\x26\x4a\x14\x4b\xf1\xf2\xff\x2f\x51\x65\x3b\xa3\x17\x26\x2e\x01\x1d\x2b\x5e\x20\x97\xc2\xc4\xde\x92\x8c\x6b\x24\x32\x25\xa0\x94\x54\xba\x02\xe1\xb6\x00\xe3\x95\xcf\xaf\x10\x63\x65\x53\xf0\x56\x72\x05\x09\x5d\x92\x47\xfa\x0e\x4a\x9b\x0c\x17\x84\x26\x32\x67\xdc\xfe\xd2\x10\x9b\xb4\x9a\x3e\xd9\x80\x42\xc9\x02\x14\x72\xd0\x74\x49\xcc\x99\x09\x69\xe2\x6a\x83\x57\x4b\x94\xf9\x33\x28\x5b\xcb\xda\x41\x94\xb9\xa9\x75\xfd\x64\x2d\x9f\x95\xa3\x2e\xb7\x24\x1f\xf4\x5c\x41\x6a\x22\xcf\xa2\x04\x52\x2e\xb8\x2d\x1e\x39\x40\x8d\x6f\x0e\x35\x1c\xd1\x40\x3e\x17\xae\x0e\x65\x49\x62\x9d\x2c\xbb\xf7\xbb\x48\x59\xa6\xc1\xd1\xd8\xc4\xb7\xdd\xb5\x67\xeb\x36\xe7\x11\x69\xed\x01\x99\xc8\x31\x03\x43\xe0\x6f\xd8\x56\xdc\x59\xcc\x0e\xfe\xaa\x9c\x16\x6e\xda\xa9\xb3\x6b\x54\x5c\x6c\xea\x96\x2d\xc8\xa4\xda\x05\x71\x88\x06\x3a\xda\x69\x40\xbc\x4f\xe4\x54\x7b\x05\x43\x04\x25\xee\x07\x3a\xf8\x79\xf5\xdf\xf9\xb4\x1e\x47\x38\xec\xfe\x52\xb8\xdb\x70\x24\x35\x5c\xb6\xe1\x96\x1d\xe0\x80\x8e\xdb\x12\xa7\x15\xc7\xd6\x39\xf8\xa0\xfb\x0b\xe3\xef\xaf\x23\xa9\x13\xae\xc4\xd1\xc6\x57\x1e\xd4\x4f\xc1\xd4\xa6\xcc\x41\xe0\xa4\xc6\xb7\x0d\xd0\x0f\xcf\x01\x59\xc2\x90\x4d\x45\xdf\xd5\xb8\x43\xf9\x5f\x85\x2d\x37\x49\xc4\xf6\x87\xa9\xfd\xd8\x1c\x6d\x8c\xb8\x96\xe7\x61\x15\xab\xf6\x78\x38\x6d\xd7\x81\x77\x40\x3b\xeb\x4b\x15\x07\x91\x64\xbb\x77\xd9\x45\x88\x45\x88\x5f\x04\x8f\x59\x36\xb6\xf8\x02\xd2\xe6\x11\x67\x43\xdc\xaf\xa7\x3e\x95\xb7\xbe\xf4\xff\xe0\xee\xd5\xf5\x0e\x9e\x81\x26\xd1\xcc\x01\x10\x65\x96\xed\x25\xff\x98\xc0\x2e\x6e\x56\xc7\x6b\x83\xed\xaa\xde\xbd\xbc\x13\x43\xf2\xce\x32\x9e\x30\x9c\xb1\x8d\xeb\xaa\x0f\x6d\x44\xbf\x76\xca\xca\x0c\xe7\x66\x5a\x39\xf8\xe9\x67\x71\xed\x58\xed\x8e\xa3\x23\xa5\xf7\xc6\x6a\x27\xb0\x83\x20\xbd\x77\x19\x21\x94\x0b\x84\x4d\x68\x7a\x96\x32\x03\x26\x7c\x93\x79\x57\x7e\xad\xd2\xdd\xf4\xec\x55\xd2\xbe\xdd\xa5\xee\x3b\x5c\x81\x1b\x3a\xdd\xfc\x43\x20\x71\x97\x02\xa6\x14\xdb\xb6\x0c\x70\x84\xfc\xef\x47\xa1\x9d\x04\x5a\x0a\xfe\x56\xc2\x77\x97\x06\x55\x39\x72\xd3\xda\xf8\xbd\xb4\xe9\x2b\x51\x48\xcd\x91\xbf\xc3\xaf\xbe\x4b\x48\x21\x60\xc3\x06\xbc\xb5\x84\xd3\x6c\xae\xda\x19\xdf\x6b\x49\x8c\x7d\x3f\xba\x6f\xff\x9d\xbe\x7a\xb4\x46\xc6\xfe\xce\xfb\x7c\x4e\x6e\xe0\x81\xd5\x6b\xfe\x44\xcd\xfd\xfc\x7e\x5b\xaf\xef\x0f\x5e\xbf\x41\xb2\x53\xaf\xe0\xe0\x2d\xa5\x91\x61\xe9\xbd\x6d\xc7\x78\x21\xd5\x52\xb0\x01\xfe\x7a\xad\x07\xe8\xb8\xbb\xcc\xfc\xff\x5a\x7c\x2e\xfe\x04\x00\x00\xff\xff\x15\xa8\x90\x4c\xe1\x0e\x00\x00")

func schemasV1ErrorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasV1ErrorsJson,
		"schemas/v1/errors.json",
	)
}

func schemasV1ErrorsJson() (*asset, error) {
	bytes, err := schemasV1ErrorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/v1/errors.json", size: 3809, mode: os.FileMode(420), modTime: time.Unix(1512962226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/v1/errors.json": schemasV1ErrorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"errors.json": &bintree{schemasV1ErrorsJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

