// Code generated by go-bindata.
// sources:
// schemas/v1/errors.json
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasV1ErrorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x41\x4f\xe3\x3a\x10\xbe\xf7\x57\x58\x86\xd3\x13\xd0\xc7\xe5\x1d\xaa\x27\x24\xa4\x1e\xde\x3b\xa0\x45\xa2\xe2\xb2\x62\x57\x6e\x33\x09\x66\x13\x3b\xd8\x13\xa4\x0a\xf1\xdf\x57\x76\xec\xc4\x4e\x9a\xa4\xb4\x65\x6f\xed\xf8\x9b\x19\xcf\xf7\x8d\xc7\xce\xfb\x8c\x10\x7a\xae\x37\xcf\x50\x30\xba\x20\xf4\x19\xb1\x5c\xcc\xe7\x2f\x5a\x8a\xcb\xda\x7a\x25\x55\x36\x4f\x14\x4b\xf1\xf2\xef\x7f\xe6\xb5\xed\x8c\x5e\x18\xbf\x04\xf4\x46\xf1\x12\xb9\x14\xc6\xf7\x96\xe4\x5c\x23\x91\x29\x01\xa5\xa4\xd2\x35\x08\xb7\x25\x98\x55\xb9\x7e\x81\x0d\xd6\x36\x05\xaf\x15\x57\x90\xd0\x05\xf9\x4e\xdf\x40\x69\x13\xe1\x82\xd0\x44\x16\x8c\xdb\x5f\x1a\x36\x26\xac\xa6\x4f\xd6\xa1\x54\xb2\x04\x85\x1c\x34\x5d\x10\xb3\x67\x42\x1a\x3f\x6f\x08\x72\x89\xaa\x58\x83\xb2\xb9\xac\x1d\x44\x55\x98\x5c\xd7\x4f\xd6\xf2\x51\x2f\xf8\x74\x0b\xf2\x4e\xcf\x15\xa4\xc6\xf3\x6c\x9e\x40\xca\x05\xb7\xc9\xe7\x0e\xe0\xf1\xcd\xa6\x86\x3d\x1a\xc8\xc7\xcc\xe5\xa1\x2c\x49\xec\x22\xcb\xef\xc3\x2a\x52\x96\x6b\x70\x34\x36\xfe\x6d\x75\xed\xde\xba\xc5\x05\x44\x5a\x7b\x44\x26\x72\xcc\xc1\x10\xf8\x0b\xb6\x35\x77\x16\xb3\x83\xbf\x3a\xa6\x85\x9b\x72\x7c\x74\x8d\x8a\x8b\xcc\x97\x6c\x41\x26\xd4\x2e\x88\x43\x34\xd0\xd1\x4a\x23\xe2\x43\x22\xa7\xca\x2b\x19\x22\x28\x71\x3f\x50\xc1\x8f\xab\xbf\xce\xa7\xf5\x38\xc1\x66\x0f\x97\xc2\x9d\x86\x13\xa9\xe1\xa2\x0d\x97\xec\x00\x47\x54\xdc\xa6\xf8\x5a\x71\x6c\x9e\xa3\x37\x7a\xb8\x30\xe1\xfc\x3a\x91\x3a\x1a\x84\xe6\xc8\xdf\x38\x6e\xa7\x0a\x7f\x08\xa0\x61\x88\x78\xaa\x8e\x86\x58\x06\xd0\x30\x04\x53\x59\x55\x80\xc0\xc9\x36\xb9\x6d\x80\xa1\x7b\x01\xc8\x12\x86\x6c\xca\xfb\xce\xe3\x8e\x95\xf0\x21\x66\xad\xab\xa6\xe3\xb9\x37\xce\xdb\x1d\x0b\x29\x80\x86\x87\x24\xc9\xa2\xff\xeb\x2a\x0b\xff\xb2\x3c\xa7\xee\x5f\xab\x7b\x02\x29\xab\x72\xb4\xf7\x87\x09\xd7\xdf\xe6\x32\x56\xa6\xa9\x55\x6c\xbf\xa5\xd1\x7e\xc6\x5a\xa4\xed\xa8\xe1\x7e\xad\x55\xe0\xf1\xb9\xba\x8e\x56\x07\xba\xd4\xae\xa5\x8a\x83\x48\xf2\xdd\x53\xfb\x22\xc6\x22\x6c\x9e\x05\xdf\xb0\x7c\x6c\xc4\x47\xda\xee\xa7\xaf\x75\xf1\x1c\xf7\xa9\xbc\x0d\x3b\xf4\x0f\x4c\x19\x9f\xef\xe8\x56\x6d\x02\xed\xd9\x00\xa2\xca\xf3\x83\xe4\x1f\x13\xd8\xf9\xed\x55\xf1\xca\x60\xbb\xaa\x77\x67\xcc\x44\x93\xbc\xb1\x9c\x27\x0c\xf7\xb8\x77\x7c\xd6\xc7\xd6\xa3\x9f\xdb\x9f\xb3\xbd\x22\x2d\x1d\xfc\xeb\x7b\x71\xe5\x58\xfd\xfc\xf8\xe9\x20\x48\xef\x05\x4a\x08\xe5\x02\x21\x8b\x4d\x6b\x29\x73\x60\x22\x34\x99\x17\xf4\xbf\x75\xb8\x9b\x9e\xbd\x0e\xda\xb7\xbb\xd0\xfd\x05\x97\xe0\x86\x4e\x17\xff\x18\x49\xdc\xa5\x80\x29\xc5\xb6\x2d\x03\x1c\xa1\xf8\x7c\x2b\xb4\x9d\x40\x2b\xc1\x5f\x2b\xf8\xdf\x85\x41\x55\x8d\x9c\xb4\xd6\xff\xb0\xab\xa1\xa7\x44\x29\xed\x65\x03\x3f\xfb\x4b\x42\x0a\x01\x19\x1b\x58\xf5\x12\x4e\xb3\xb9\x6c\x7b\xfc\xa0\x21\x31\x76\x7f\x74\xbf\x72\x76\xae\xf9\xd6\x1a\x69\xfb\xbb\xe0\x96\x9f\x9c\xc0\x03\xa3\xd7\x7c\x2e\xee\xfb\x4a\xf8\x6f\xb5\xba\x3f\x7a\xfc\x46\xc1\xbe\x7a\x04\x47\xaf\x46\x8d\x0c\xab\xe0\x15\x3f\xc6\x0b\xa9\x87\x82\x75\x08\xc7\xab\x6f\xa0\xd3\xce\x32\xf3\xa5\x39\xfb\x98\xfd\x0e\x00\x00\xff\xff\x29\xf6\x17\x40\xcb\x0f\x00\x00")

func schemasV1ErrorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasV1ErrorsJson,
		"schemas/v1/errors.json",
	)
}

func schemasV1ErrorsJson() (*asset, error) {
	bytes, err := schemasV1ErrorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/v1/errors.json", size: 4043, mode: os.FileMode(420), modTime: time.Unix(1520545168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/v1/errors.json": schemasV1ErrorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"errors.json": &bintree{schemasV1ErrorsJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

