// Code generated by go-bindata.
// sources:
// schemas/v1/errors.json
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasV1ErrorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x41\x4f\xe3\x3c\x10\xbd\xf7\x57\x58\x86\xd3\x27\xa0\x1f\x97\x3d\x54\x2b\x24\xa4\x1e\x76\x0f\x68\x91\xa8\xb8\xac\xd8\x95\x69\x26\xc5\xac\x6b\x07\x7b\x82\x54\x21\xfe\xfb\xca\x8e\x9d\xd8\x49\x93\x94\xb6\xec\xad\x1d\xbf\x99\xf1\xbc\x37\x1e\x3b\x6f\x13\x42\xe8\xa9\x59\x3e\xc1\x9a\xd1\x19\xa1\x4f\x88\xc5\x6c\x3a\x7d\x36\x4a\x9e\x57\xd6\x0b\xa5\x57\xd3\x4c\xb3\x1c\xcf\xff\xff\x32\xad\x6c\x27\xf4\xcc\xfa\x65\x60\x96\x9a\x17\xc8\x95\xb4\xbe\xd7\x44\x70\x83\x44\xe5\x04\xb4\x56\xda\x54\x20\xdc\x14\x60\x57\xd5\xe3\x33\x2c\xb1\xb2\x69\x78\x29\xb9\x86\x8c\xce\xc8\x4f\xfa\x0a\xda\xd8\x08\x67\x84\x66\x6a\xcd\xb8\xfb\x65\x60\x69\xc3\x1a\xfa\xe0\x1c\x0a\xad\x0a\xd0\xc8\xc1\xd0\x19\xb1\x7b\x26\xa4\xf6\x0b\x86\x28\x97\x2c\xd7\x8f\xa0\x5d\x2e\x67\x07\x59\xae\x6d\xae\xcb\x07\x67\x79\xaf\x16\x42\xba\x19\x79\xa3\xa7\x1a\x72\xeb\x79\x32\xcd\x20\xe7\x92\xbb\xe4\x53\x0f\x08\xf8\x7a\x53\xfd\x1e\x35\xe4\x7d\xe2\xf3\x50\x96\x65\x6e\x91\x89\xdb\xb8\x8a\x9c\x09\x03\x9e\xc6\xda\xbf\xa9\xae\xd9\x5b\xbb\xb8\x88\x48\x67\x4f\xc8\x44\x8e\x02\x2c\x81\x7f\x60\x53\x71\xe7\x30\x5b\xf8\xab\x62\x3a\xb8\x2d\x27\x44\x37\xa8\xb9\x5c\x85\x92\x1d\xc8\x86\xda\x06\xf1\x88\x1a\x3a\x58\x69\x42\x7c\x4c\xe4\x58\x79\x05\x43\x04\x2d\x6f\x7b\x2a\xf8\x75\xf1\xdf\xe9\xb8\x1e\x47\xd8\xec\xfe\x52\xf8\xd3\x70\x24\x35\x7c\xb4\xfe\x92\x3d\xe0\x80\x8a\x9b\x14\x9f\x2b\x8e\xcb\x73\xf0\x46\xf7\x17\x26\x9e\x5f\x47\x52\xc7\x80\x34\x1c\xf9\x2b\xc7\xcd\x58\xe1\x77\x11\x34\x0e\x91\x4e\xd5\xc1\x10\xf3\x08\x1a\x87\x60\x7a\x55\xae\x41\xe2\x68\x9b\x5c\xd7\xc0\xd8\x7d\x0d\xc8\x32\x86\x6c\xcc\xfb\x26\xe0\x0e\x95\xf0\x2e\x65\xad\xad\xa6\xe7\xb9\x33\xce\x9b\x1d\x4b\x25\x81\xc6\x87\x24\x5b\x25\xff\x99\x10\xd4\xff\x6b\x84\xce\x20\x67\xa5\x40\x77\x61\x58\xff\xee\xbe\xe6\xa9\x14\x75\x71\x72\xf3\x23\x4f\x36\x30\xd4\x13\x4d\x0b\xf5\x37\x68\x45\x3b\x4f\x0f\xd2\x65\xb2\xda\xd3\x96\x6e\x2d\xd7\x1c\x64\x26\xb6\x8f\xe9\xb3\x14\x8b\xb0\x7c\x92\x7c\xc9\xc4\xd0\x4c\x4f\xc4\xdc\x4d\x50\xe7\x12\x38\xee\x52\x79\x1d\xb7\xe4\x3f\x18\x2b\x21\xdf\xc1\xbd\x59\x07\xda\xb1\x01\x64\x29\xc4\x5e\xf2\x0f\x09\xec\xfd\x76\xaa\x78\x61\xb1\x6d\xd5\xdb\x43\x65\xa4\x49\x5e\x99\xe0\x19\xc3\x1d\x2e\x9a\x90\xf5\xbe\xf1\xe8\xe6\x0e\xe7\x6c\xa7\x48\x73\x0f\xff\xfc\x5e\x5c\x78\x56\x3f\x3e\x6f\x5a\x08\xd2\x79\x72\x12\x42\xb9\x44\x58\xa5\xa6\x47\xa5\x04\x30\x19\x9b\xec\x93\xf9\x6b\x15\xee\xaa\x63\xaf\x82\x76\xed\x3e\x74\x77\xc1\x27\xb8\xa2\xe3\xc5\xdf\x27\x12\xb7\x29\x60\x5a\xb3\x4d\xc3\x00\x47\x58\x7f\xbc\x15\x9a\x4e\xa0\xa5\xe4\x2f\x25\x7c\xf7\x61\x50\x97\x03\x27\xad\xf1\xdf\xef\x2e\xe8\x28\x51\x28\x77\xbb\xc0\xef\xee\x92\x54\x52\xc2\x8a\xf5\xac\x06\x09\xc7\xd9\x9c\x37\x3d\xbe\xd7\x90\x18\xba\x3f\xda\x9f\x35\x5b\xd7\x42\x6b\x0d\xb4\xfd\x4d\x74\xad\x8f\x4e\xe0\x9e\xd1\x6b\xbf\x0f\x77\x7d\x16\x7c\x5b\x2c\x6e\x0f\x1e\xbf\x49\xb0\xcf\x1e\xc1\xc9\x33\xd1\x20\xc3\x32\x7a\xb6\x0f\xf1\x42\xaa\xa1\xe0\x1c\xe2\xf1\x1a\x1a\xe8\xb8\xb3\xcc\x7e\x5a\x4e\xde\x27\x7f\x03\x00\x00\xff\xff\x10\x0f\x3c\x2b\xbc\x0f\x00\x00")

func schemasV1ErrorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasV1ErrorsJson,
		"schemas/v1/errors.json",
	)
}

func schemasV1ErrorsJson() (*asset, error) {
	bytes, err := schemasV1ErrorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/v1/errors.json", size: 4028, mode: os.FileMode(420), modTime: time.Unix(1520453056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/v1/errors.json": schemasV1ErrorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"v1": &bintree{nil, map[string]*bintree{
			"errors.json": &bintree{schemasV1ErrorsJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

