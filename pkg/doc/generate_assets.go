// Code generated by vfsgen; DO NOT EDIT.

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/errors.json": &vfsgen۰CompressedFileInfo{
			name:             "errors.json",
			modTime:          time.Time{},
			uncompressedSize: 4976,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4b\x4f\x23\x39\x10\xbe\xe7\x57\x58\x86\xd3\x0a\xc8\x72\xd9\x43\xb4\x42\x42\xca\x81\x39\xa0\x41\x22\x9a\xcb\x88\x19\x39\xe9\xea\xc4\x4c\xc7\x0e\x76\x35\x52\x84\xf8\xef\x23\xbb\xed\x6e\xbb\x9f\x79\x72\x40\x22\xe5\xaa\xaf\x1e\x5f\xb9\xca\xfd\x31\x22\x84\x5e\xea\xc5\x0a\xd6\x8c\x4e\x08\x5d\x21\x6e\x26\xe3\xf1\xab\x96\xe2\xba\x90\xde\x48\xb5\x1c\x27\x8a\xa5\x78\xfd\xef\x7f\xe3\x42\x76\x41\xaf\x8c\x5d\x02\x7a\xa1\xf8\x06\xb9\x14\xc6\xf6\x9e\x64\x5c\x23\x91\x29\x01\xa5\xa4\xd2\x85\x12\x6e\x37\x60\x4e\xe5\xfc\x15\x16\x58\xc8\x14\xbc\xe5\x5c\x41\x42\x27\xe4\x27\x7d\x07\xa5\x0d\xc2\x15\xa1\x89\x5c\x33\x6e\xff\xd3\xb0\x30\xb0\x9a\xbe\x58\x83\x8d\x92\x1b\x50\xc8\x41\xd3\x09\x31\x31\x13\x52\xda\x79\x41\xe0\x4b\xe4\xeb\x39\x28\xeb\xcb\xca\x41\xe4\x6b\xe3\xeb\xf6\xc5\x4a\x3e\x8b\x03\xef\x6e\x42\x3e\xe8\xa5\x82\xd4\x58\x5e\x8c\x13\x48\xb9\xe0\xd6\xf9\xd8\x29\x78\xfd\x32\xa8\x6e\x8b\x52\xe5\x73\xe4\xfc\x50\x96\x24\xf6\x90\x65\x4f\x61\x16\x29\xcb\x34\xb8\x32\x96\xf6\x55\x76\x55\x6c\xf5\xe4\x82\x42\x5a\x79\x54\x4c\xe4\x98\x81\x29\xe0\x1f\xd8\x16\xb5\xb3\x3a\x2d\xf5\x2b\x30\xad\xba\x49\xc7\xa3\x6b\x54\x5c\x2c\x7d\xca\x56\xc9\x40\xb5\xa9\x38\x8d\x52\xb5\x37\xd3\xa8\xf0\x61\x21\x87\xd2\xdb\x30\x44\x50\xe2\xa9\x23\x83\x5f\x37\xff\x5c\x0e\xf3\x71\x82\x60\x0f\xa7\xc2\xdd\x86\x13\xb1\xe1\xd0\xba\x53\x76\x0a\x47\x64\x5c\xb9\x38\x2f\x39\xd6\xcf\xd1\x81\x1e\x4e\x4c\x38\xbf\x4e\xc4\x0e\x2a\xc6\x71\x90\x9d\x59\xa1\x15\x1a\x6a\x10\x9a\x23\x7f\xe7\xb8\x1d\xb2\x7e\x0e\x54\x43\x88\x78\x1c\xf7\x42\x4c\x03\xd5\x10\x82\xa9\x65\xbe\x06\x31\x9c\xc1\x7d\xa9\x18\x9a\xaf\x01\x59\xc2\x90\x0d\x59\x3f\x7a\xbd\x63\xb9\x9f\x95\xe5\xae\x77\x00\x53\x8a\x6d\xab\x06\xe0\x08\xeb\xdd\x68\xa9\x12\xa2\xb9\xe0\x6f\x39\x7c\x73\xa6\xa8\xf2\xae\x08\xda\x02\x70\xcd\xd1\xd8\x41\x55\xb5\x16\x52\x20\xe3\x02\x14\x75\xb2\x97\x26\xfc\x73\xdc\x16\xfb\x3b\x11\x52\x00\x0d\xc7\x47\xb2\x8c\x7e\xcf\xf3\x65\xf8\x93\x65\x59\x19\x4d\x89\x9a\x40\xca\xf2\x0c\xed\x66\x35\x70\xcd\x30\xa7\x71\xeb\x95\x64\x8a\xed\xf7\x34\x8a\xa7\xef\xf2\x54\x77\xad\xfb\x26\x17\x6d\xc6\xe3\x89\x73\x1b\x9d\x76\xdc\x5f\x7b\x96\x2a\x0e\x22\xc9\xda\xf7\xd9\x55\xac\x8b\xb0\x58\x09\xbe\x60\x59\xdf\xf2\x8b\x9a\x97\xec\xd4\xc0\xd6\xa4\x9b\xf1\xfb\xf0\x0a\x7e\xc1\xfc\xf5\xfe\x8e\xbe\x8b\x25\xd0\x8e\x0d\x20\xf2\x2c\x3b\x88\xfe\x3e\x82\x9d\xdd\x4e\x19\xcf\x8c\x6e\x9d\xf5\xfa\x10\x1d\x68\x92\x77\x96\xf1\x84\xe1\x0e\x1b\xd9\x7b\xfd\x51\x59\x34\x7d\xfb\x7b\xb6\x13\xd2\xd4\xa9\x9f\xbf\x17\x67\xae\xaa\xfb\x8f\x9f\x9a\x06\x69\xbc\xcd\xcd\x6c\x16\x08\xcb\x58\x34\x97\x32\x03\x26\x42\x91\xf9\xb6\xf8\xbf\x80\xbb\x6b\xc8\x0b\xd0\xa6\xdc\x41\x37\x0f\x9c\x83\xbb\x9e\xd1\xdb\x42\xd8\x89\xf6\x4c\x03\x79\xcf\x9d\xd3\xb4\x3f\x6c\x35\x34\x98\xd8\x48\xbb\x6c\xe0\x77\xf3\x48\x48\x21\x60\xc9\x3a\x4e\x3d\x85\xc3\xd5\x9c\x56\x3d\x7e\xd0\x90\xe8\xdb\x1f\xf5\xef\xbf\xd6\x33\xdf\x5a\xad\x87\x8e\xcd\x90\xc7\xba\xbf\x7d\xed\x7c\x2c\xfb\xda\x95\x71\xf6\xdc\xcf\xc7\xe0\xbd\x35\xb8\x2a\x3a\x76\x84\xf9\xe2\xdf\xf5\xbd\xf6\x30\x9b\x3d\x1d\xbd\x27\x22\xb0\x73\xef\x8a\xe8\xe1\xaf\x91\x61\x1e\x7c\x88\xf5\xd5\x85\x14\xd3\xcb\x1a\x84\xb4\xf8\x4e\xaf\xcf\xee\x15\xb0\x04\x86\xb7\x40\x98\xfc\x83\x33\x39\xdf\xfc\x6e\xf3\xf6\x35\xaf\x8a\xa6\xe7\x93\xf6\x8d\x83\x3c\xed\x53\x33\x1e\xe5\x24\x1a\xe7\xad\xaf\x0c\x0f\x1c\xf2\xd7\x45\xcb\xc8\xfc\x7d\x8e\xfe\x06\x00\x00\xff\xff\x3a\x7d\xe8\xc4\x70\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/errors.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
