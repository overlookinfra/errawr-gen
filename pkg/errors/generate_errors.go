// Package errors contains errors for the domain "errawr".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "errawr",
	Title: "Errawr Generator",
}

// DocSection defines a section of errors with the following scope:
// Document errors
var DocSection = &impl.ErrorSection{
	Key:   "doc",
	Title: "Document errors",
}

// DocNoVersionErrorCode is the code for an instance of "no_version_error".
const DocNoVersionErrorCode = "errawr_doc_no_version_error"

// IsDocNoVersionError tests whether a given error is an instance of "no_version_error".
func IsDocNoVersionError(err errawr.Error) bool {
	return err != nil && err.Is(DocNoVersionErrorCode)
}

// IsDocNoVersionError tests whether a given error is an instance of "no_version_error".
func (External) IsDocNoVersionError(err errawr.Error) bool {
	return IsDocNoVersionError(err)
}

// DocNoVersionErrorBuilder is a builder for "no_version_error" errors.
type DocNoVersionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "no_version_error" from this builder.
func (b *DocNoVersionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The input document does not have a version key.",
		Technical: "The input document does not have a version key.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "no_version_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     DocSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Document does not have version information",
		Version:          1,
	}
}

// NewDocNoVersionErrorBuilder creates a new error builder for the code "no_version_error".
func NewDocNoVersionErrorBuilder() *DocNoVersionErrorBuilder {
	return &DocNoVersionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewDocNoVersionError creates a new error with the code "no_version_error".
func NewDocNoVersionError() Error {
	return NewDocNoVersionErrorBuilder().Build()
}

// DocParseErrorCode is the code for an instance of "parse_error".
const DocParseErrorCode = "errawr_doc_parse_error"

// IsDocParseError tests whether a given error is an instance of "parse_error".
func IsDocParseError(err errawr.Error) bool {
	return err != nil && err.Is(DocParseErrorCode)
}

// IsDocParseError tests whether a given error is an instance of "parse_error".
func (External) IsDocParseError(err errawr.Error) bool {
	return IsDocParseError(err)
}

// DocParseErrorBuilder is a builder for "parse_error" errors.
type DocParseErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "parse_error" from this builder.
func (b *DocParseErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The YAML document failed to parse.",
		Technical: "The YAML document failed to parse.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "parse_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     DocSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Parse error",
		Version:          1,
	}
}

// NewDocParseErrorBuilder creates a new error builder for the code "parse_error".
func NewDocParseErrorBuilder() *DocParseErrorBuilder {
	return &DocParseErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewDocParseError creates a new error with the code "parse_error".
func NewDocParseError() Error {
	return NewDocParseErrorBuilder().Build()
}

// DocUnknownVersionErrorCode is the code for an instance of "unknown_version_error".
const DocUnknownVersionErrorCode = "errawr_doc_unknown_version_error"

// IsDocUnknownVersionError tests whether a given error is an instance of "unknown_version_error".
func IsDocUnknownVersionError(err errawr.Error) bool {
	return err != nil && err.Is(DocUnknownVersionErrorCode)
}

// IsDocUnknownVersionError tests whether a given error is an instance of "unknown_version_error".
func (External) IsDocUnknownVersionError(err errawr.Error) bool {
	return IsDocUnknownVersionError(err)
}

// DocUnknownVersionErrorBuilder is a builder for "unknown_version_error" errors.
type DocUnknownVersionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_version_error" from this builder.
func (b *DocUnknownVersionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The document version is {{document_version}}, but we expected {{#join expected_versions}}{{this}}{{/join}}.",
		Technical: "The document version is {{document_version}}, but we expected {{#join expected_versions}}{{this}}{{/join}}.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_version_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     DocSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown version",
		Version:          1,
	}
}

// NewDocUnknownVersionErrorBuilder creates a new error builder for the code "unknown_version_error".
func NewDocUnknownVersionErrorBuilder(documentVersion string, expectedVersions []string) *DocUnknownVersionErrorBuilder {
	return &DocUnknownVersionErrorBuilder{arguments: impl.ErrorArguments{
		"document_version":  impl.NewErrorArgument(documentVersion, "the version given in the input document"),
		"expected_versions": impl.NewErrorArgument(expectedVersions, "the versions known to this application"),
	}}
}

// NewDocUnknownVersionError creates a new error with the code "unknown_version_error".
func NewDocUnknownVersionError(documentVersion string, expectedVersions []string) Error {
	return NewDocUnknownVersionErrorBuilder(documentVersion, expectedVersions).Build()
}

// DocValidationErrorCode is the code for an instance of "validation_error".
const DocValidationErrorCode = "errawr_doc_validation_error"

// IsDocValidationError tests whether a given error is an instance of "validation_error".
func IsDocValidationError(err errawr.Error) bool {
	return err != nil && err.Is(DocValidationErrorCode)
}

// IsDocValidationError tests whether a given error is an instance of "validation_error".
func (External) IsDocValidationError(err errawr.Error) bool {
	return IsDocValidationError(err)
}

// DocValidationErrorBuilder is a builder for "validation_error" errors.
type DocValidationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// WithErrors sets the problems with the document in this builder.
func (b *DocValidationErrorBuilder) WithErrors(value []string) *DocValidationErrorBuilder {
	b.arguments["errors"].Set(value)
	return b
}

// Build creates the error for the code "validation_error" from this builder.
func (b *DocValidationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The YAML document does not conform to the errawr schema. {{#if errors}}\n{{#enum errors}}{{this}}{{/enum}} {{/if}}",
		Technical: "The YAML document does not conform to the errawr schema. {{#if errors}}\n{{#enum errors}}{{this}}{{/enum}} {{/if}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "validation_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     DocSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Validation error",
		Version:          1,
	}
}

// NewDocValidationErrorBuilder creates a new error builder for the code "validation_error".
func NewDocValidationErrorBuilder() *DocValidationErrorBuilder {
	return &DocValidationErrorBuilder{arguments: impl.ErrorArguments{"errors": impl.NewErrorArgument([]interface{}{}, "the problems with the document")}}
}

// NewDocValidationError creates a new error with the code "validation_error".
func NewDocValidationError() Error {
	return NewDocValidationErrorBuilder().Build()
}
